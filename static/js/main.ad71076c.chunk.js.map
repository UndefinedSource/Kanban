{"version":3,"sources":["components/Header.js","components/Task.js","components/Column.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","type","spellCheck","placeholder","onClick","onClickAddCol","onClickDarkMode","htmlFor","React","memo","task_id","task","id","TextareaAutosize","defaultValue","text","onChange","e","changedTaskText","target","value","isFirstCol","moveTaskToPrevCol","completeTask","deleteTask","isLastCol","moveTaskToNextCol","completed_time","Column","editedTaskText","editTaskText","state","addCompletedTimeToTask","taskObj","col_id","newTaskTextRef","createRef","newTaskText","this","current","addTask","tasks","map","CSSTransition","key","in","timeout","classNames","appear","onClickDeleteCol","rowsMin","ref","onClickAddTask","bind","TransitionGroup","Component","Board","col","getColumnById","currentTime","Date","find","toLocaleString","taskChangedCol","setState","columnListArr","currentCol","length","push","createNewTaskId","col_found","filteredCol","filter","editedColumnListArr","forEach","currentColumnIndex","getColumnIndex_in_columnListArr","nextCol","prevCol","taskArr","newId","col_in_columnListArr","findIndex","newCol","currentList","changeTheme","selectedCol_id","columns","columnCount","heading_noContent","column","deleteColOnClickHandler","enter","exit","addColOnClickHandler","darkModeOnClickHandler","App","useState","isDarkMode","setIsDarkMode","useEffect","window","onbeforeunload","returnValue","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ad71076c.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = (props) => {\n        return (\n            <div className=\"header\">\n                <input type=\"text\" spellCheck=\"false\" className={\"txt-title\"} placeholder=\"Enter Title\"/>\n                <div className=\"menu\">\n                    <span></span>\n                    <button className=\"btn-addColumn\" onClick={props.onClickAddCol}>+</button>\n                    <span className=\"switch-container\">\n                    <input type=\"checkbox\" className=\"chk-darkMode\" onClick={props.onClickDarkMode}/>\n                    <label htmlFor=\"\" className=\"switch-on-text\">Light</label>\n                    <label htmlFor=\"\" className=\"switch-off-text\">Dark</label>\n                    </span>\n                </div>\n            </div>\n        );\n    }\n\nexport default Header;","import React from \"react\";\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\n\nconst Task = (props) => {\n    const task_id = props.task.id;\n\n    function onChangeTaskText(e){\n        props.changedTaskText(task_id, e.target.value);\n    }\n\n    function onClickCompleteTask() {\n        props.completeTask(task_id);\n    }\n\n    function onClickDeleteTask() {\n        props.deleteTask(task_id);\n    }\n\n    function onClickMoveTaskToNextCol() {\n        props.moveTaskToNextCol(props.task);\n    }\n\n    function onClickMoveTaskToPrevCol() {\n        props.moveTaskToPrevCol(props.task);\n    }\n\n    return (\n        <div>\n            <TextareaAutosize spellCheck=\"false\" className=\"txtarea-task\"\n                    defaultValue={props.task.text}\n                    onChange={onChangeTaskText}>\n            </TextareaAutosize>\n            \n            <div>         \n                {(!props.isFirstCol) ?\n                    <button className=\"btn-prevArrow\" onClick={onClickMoveTaskToPrevCol}>\n                        <span className=\"material-icons\"></span>\n                    </button>\n                    : null             \n                }\n                <button className=\"btn-completeTask\" onClick={onClickCompleteTask}>\n                    <span className=\"material-icons\">&#xe5ca;</span>\n                </button>\n                <button id={\"btn-deleteTask\"+ props.task.id} className=\"btn-deleteTask\" onClick={onClickDeleteTask}>\n                    <span className=\"material-icons\">&#xe872;</span>\n                </button>\n                {(!props.isLastCol) ?\n                    <button className=\"btn-nextArrow\" onClick={onClickMoveTaskToNextCol}>\n                        <span className=\"material-icons\"></span>\n                    </button>\n                    : null\n                }\n                {(props.completed_time) ?\n                    <p className=\"p-completedTime\">{'Completed: ' + props.task.completed_time}</p>\n                    : null\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default React.memo(Task);","import React from 'react';\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\nimport Task from \"./Task\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\n\nclass Column extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            id: this.props.col_id\n        }\n        this.newTaskTextRef = React.createRef();\n    }\n\n    onClickAddTask() {\n        var newTaskText = this.newTaskTextRef.current.value;\n\n        // check textarea newTaskText value if it has no value\n        if (newTaskText === \"\") return;\n\n        this.props.addTask(this.state.id, newTaskText);\n\n        // must reference actual 'newTaskTextRef' variable to reset its value\n        this.newTaskTextRef.current.value = \"\";\n    }\n\n    changedTaskText = (task_id, editedTaskText) => {\n        this.props.editTaskText(this.state.id, task_id, editedTaskText);\n    }\n\n    completeTask = (task_id) => {\n        this.props.addCompletedTimeToTask(this.state.id, task_id);\n    }\n\n    deleteTask = (task_id) => {\n        this.props.deleteTask(this.state.id, task_id);\n    }\n\n    moveTaskToNextCol = (taskObj) => {\n        this.props.moveTaskToNextCol(this.state.id, taskObj);\n    }\n\n    moveTaskToPrevCol = (taskObj) => {\n        this.props.moveTaskToPrevCol(this.state.id, taskObj);\n    }\n\n    render() {\n        var tasks;\n        if (this.props.tasks) {\n             tasks = this.props.tasks.map(task => {\n                return (\n                    <CSSTransition key={task.id} in={true} timeout={500} classNames=\"task-animation\" appear={true}>\n                    <li>\n                        <Task task={task}\n                        isFirstCol={this.props.isFirstCol}\n                        isLastCol={this.props.isLastCol}\n                        completed_time={task.completed_time}\n                        changedTaskText={this.changedTaskText}\n                        deleteTask={this.deleteTask}\n                        completeTask={this.completeTask}\n                        moveTaskToPrevCol={this.moveTaskToPrevCol}\n                        moveTaskToNextCol={this.moveTaskToNextCol}> \n                        </Task>\n                    </li>\n                    </CSSTransition>\n                )\n            });\n        }\n\n        else { tasks = null }\n        \n        return (\n            <div className=\"column\">         \n                <input type=\"text\" className=\"txt-columnName\" placeholder=\"Enter Column Name\" />\n                <button className=\"btn-deleteColumn\" onClick={this.props.onClickDeleteCol}>\n                    <span className=\"material-icons\">&#xe872;</span>\n                </button>\n                <TextareaAutosize rowsMin={1}\n                    spellCheck=\"false\"\n                    placeholder=\"Enter New Task\"\n                    className=\"txtarea-newTask\"\n                    defaultValue=\"\"\n                    ref={this.newTaskTextRef}>\n                </TextareaAutosize>\n                <button className=\"btn-addTask\" onClick={this.onClickAddTask.bind(this)}>Post Task</button>\n                <ul>\n                    <TransitionGroup>{tasks}</TransitionGroup>\n                </ul>\n            </div>\n        )\n    }\n\n}\n\nexport default React.memo(Column);","import React from 'react';\nimport Header from './Header';\nimport Column from './Column';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\n\nclass Board extends React.Component {\n    constructor(props) {\n      super();\n      \n      this.state = {\n        columnListArr: []\n      }\n    }\n\n    // use arrow function to access state and class methods\n    addCompletedTimeToTask = (col_id, task_id) => {\n        var col = this.getColumnById(col_id);\n        var currentTime = new Date();\n    \n        var taskObj = col['tasks'].find(task => task.id === task_id);\n    \n        // create 'completed_time' key then store current time\n        taskObj['completed_time'] = currentTime.toLocaleString();\n    \n        var taskChangedCol = col.tasks.map(task => {\n          if (task.id === task_id) { return taskObj}\n          else { return task };\n        });\n    \n        // replace the array that has been changed\n        this.setState({\n          columnListArr: this.state.columnListArr.map(col => {\n            if (col.id === taskChangedCol.id) {\n              return taskChangedCol;\n            }\n            else return col;\n          })\n        });\n    }\n\n    addTask = (col_id, text, completed_time) => {\n        var currentCol = this.getColumnById(col_id);\n    \n        if (currentCol['tasks'].length === 0) {\n            if (completed_time !== null) {\n            currentCol['tasks'] = [{id: 0, text: text, completed_time: completed_time}];\n            }\n            else {\n            currentCol['tasks'] = [{id: 0, text: text, completed_time: \"\"}];\n            }\n        }\n        \n        else {\n            if (completed_time) {\n            currentCol['tasks'].push({id: this.createNewTaskId(currentCol['tasks']), text: text, completed_time: completed_time});\n            }\n            else {\n            currentCol['tasks'].push({id: this.createNewTaskId(currentCol['tasks']), text: text});\n            }\n        }\n    \n        // replace the array that has been changed\n        this.setState({\n            columnListArr: this.state.columnListArr.map(col => {\n            if (col.id === currentCol.id) {\n                return currentCol;\n            }\n            else {return col};\n            })\n        });\n    }\n\n    createNewTaskId(taskArr) {\n        // return ++lastElementId < does not work, so duplicate id value in a new variable then increment by 1\n        var lastElementId = taskArr[taskArr.length-1].id;\n        var newId = lastElementId;\n        return ++newId;\n    }\n\n    deleteTask = (col_id, task_id) => {\n        // find column by ID\n        var col_found = this.getColumnById(col_id);\n    \n        // filter column's task array by removing matching task ID\n        var filteredCol = col_found['tasks'].filter(task => task.id !== task_id);\n    \n        // replace column's tasks with filtered array of tasks\n        col_found['tasks'] = filteredCol;\n    \n        // setState target column only\n        this.setState({\n          columnListArr: this.state.columnListArr.map((col) => {\n            if (col.id === col_id) { return col_found }\n            else { return col };\n          })\n        });\n    }\n\n    editTaskText = (col_id, task_id, editedTaskText) => {\n        var editedColumnListArr = this.state.columnListArr;\n\n        // find task by its parent(column) ID and then its ID, then change its text to new text.\n        editedColumnListArr.forEach(col => {\n            if (col.id === col_id) {\n                col.tasks.forEach(task => {\n                    if (task.id === task_id) { task.text = editedTaskText; }\n                })\n            }\n        });\n\n        this.setState({\n            columnListArr: editedColumnListArr\n        });\n    }\n\n    getColumnById(col_id) {\n        // find the column with matching ID\n        var col = this.state.columnListArr.find(col_in_columnListArr => col_in_columnListArr.id === col_id)\n        return col;\n    }\n\n    getColumnIndex_in_columnListArr(col_id) {\n      // find column with matching col_id in columnListArr then return its index\n      const columnIndex = this.state.columnListArr.findIndex(col => (col.id === col_id));\n      return columnIndex;\n    }\n  \n    moveTaskToNextCol = (col_id, taskObj) => {\n        this.deleteTask(col_id, taskObj.id);\n    \n        var currentColumnIndex = this.getColumnIndex_in_columnListArr(col_id);\n        var nextCol = this.state.columnListArr[++currentColumnIndex];\n    \n        // if taskObj has completed_time key then trigger 'addTask' method with additional completed_time\n        if ('completed_time' in taskObj) {\n          this.addTask(nextCol.id, taskObj.text, taskObj.completed_time);\n        }\n        else {\n          this.addTask(nextCol.id, taskObj.text);\n        }\n    }\n    \n    moveTaskToPrevCol = (col_id, taskObj) => {\n        this.deleteTask(col_id, taskObj.id);\n\n        var currentColumnIndex = this.getColumnIndex_in_columnListArr(col_id);\n        var prevCol = this.state.columnListArr[--currentColumnIndex];\n\n        // if taskObj has completed_time key then trigger 'addTask' method with additional completed_time\n        if ('completed_time' in taskObj) {\n            this.addTask(prevCol.id, taskObj.text, taskObj.completed_time);\n        }\n        else {\n            this.addTask(prevCol.id, taskObj.text);\n        }\n    }\n  \n    addColOnClickHandler() {\n      var currentList = this.state.columnListArr;\n      var newCol;\n      \n      if (currentList.length === 0) {\n        newCol = {id: 0, tasks: []}\n      }\n      else {\n        newCol = {id: currentList[currentList.length-1].id + 1, tasks: []}\n      }\n      \n      this.setState({\n        columnListArr: [...this.state.columnListArr, newCol]\n      });\n    }\n\n    darkModeOnClickHandler() {\n        this.props.changeTheme();\n    }\n  \n    deleteColOnClickHandler(selectedCol_id) {\n      // remove column with matching column ID  \n      this.setState({\n        columnListArr: this.state.columnListArr.filter(col => col.id !== selectedCol_id)\n      });\n    }\n  \n    render() {\n      var columns;\n      // count column to determine first and last columns and\n      // show move-task-nextCol or move-task=prevCol or both buttons to tasks which \n      // are in columns that have adjacent columns\n      var columnCount = -1;\n        columns = this.state.columnListArr.map((column) => {\n          columnCount++;\n          return (\n            <CSSTransition key={column.id} in={true} timeout={500} classNames=\"column-animation\" appear={true}>\n              <Column col_id={column.id} tasks={column.tasks}\n              addCompletedTimeToTask={this.addCompletedTimeToTask}\n              addTask={this.addTask}\n              deleteTask={this.deleteTask}\n              editTaskText={this.editTaskText}\n              isFirstCol={(columnCount === 0) ? true : false}\n              isLastCol={(columnCount === this.state.columnListArr.length - 1) ? true : false}\n              moveTaskToNextCol={this.moveTaskToNextCol}\n              moveTaskToPrevCol={this.moveTaskToPrevCol}\n              onClickDeleteCol={() => this.deleteColOnClickHandler(column.id)}>\n              </Column>\n            </CSSTransition>\n          )\n        });\n  \n      const heading_noContent = (columns.length === 0) ?\n          <CSSTransition in={true} timeout={{enter: 500, exit: 0}} classNames=\"heading-noContent-animation\" appear={true}>\n            <h1 className=\"heading-noContent\">Oops! No Board Columns<br/>Click the plus button above to create a column</h1>\n          </CSSTransition>\n          : null\n  \n      return (\n      <div>\n        <Header onClickAddCol={() => this.addColOnClickHandler()} onClickDarkMode={() => this.darkModeOnClickHandler()}/>\n        <TransitionGroup>\n          {heading_noContent}\n          {columns}\n       </TransitionGroup>\n      </div>\n      );\n    }\n  }\n  \n  export default Board;","import React, { useState, useEffect } from \"react\";\nimport Board from \"./components/Board\";\nimport \"./App.css\";\n\nfunction App() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  const changeTheme = () => {\n    setIsDarkMode(!isDarkMode);\n  }\n\n  useEffect(() =>{\n    window.onbeforeunload = function(e) {\n      var dialogText = \"\";\n      e.returnValue = dialogText;\n    }\n  }, []);\n\n  return (\n    <div className={isDarkMode? \"app-darkMode\" : \"app\"} >\n      <Board changeTheme={() => changeTheme()}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}