{"version":3,"sources":["components/Header.js","components/Column.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","type","spellCheck","placeholder","onClick","onClickAddCol","onClickDarkMode","htmlFor","Column","state","id","col_id","taskText","this","addTask","setState","e","console","log","target","value","task_id","deleteTask","addCompletedTimeToTask","taskObj","moveTaskToNextCol","moveTaskToPrevCol","tasks","map","task","key","TextareaAutosize","draggable","defaultValue","text","isFirstCol","onClickMoveTaskToPrevCol","onClickCompleteTask","onClickDeleteTask","isLastCol","onClickMoveTaskToNextCol","completed_time","onClickDeleteCol","rowsMin","onChange","onChangeTaskInput","bind","onClickAddTask","React","Component","App","isDarkMode","window","onbeforeunload","returnValue","changeTheme","Board","currentCol","getColumnById","length","push","createNewId","columnListArr","col","currentTime","Date","find","toLocaleString","taskChangedCol","col_found","filteredCol","filter","currentColumnIndex","getColumnIndex_in_columnListArr","nextCol","prevCol","newCol","currentList","selectedCol_id","findIndex","taskArr","newId","col_in_columnListArr","columns","columnCount","txtNoContent","column","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cfdde03d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\nconst Header = (props) => {\r\n        return (\r\n            <div className=\"header\">\r\n                <input type=\"text\" spellCheck=\"false\" className={\"txt-title\"} placeholder=\"Enter Title\"/>\r\n                <div className=\"menu\">\r\n                    <span></span>\r\n                    <button className=\"btn-addColumn\" onClick={props.onClickAddCol}>+</button>\r\n                    <span className=\"switch-container\">\r\n                    <input type=\"checkbox\" className=\"chk-darkMode\" onClick={props.onClickDarkMode}/>\r\n                    <label htmlFor=\"\" className=\"switch-on-text\">Light</label>\r\n                    <label htmlFor=\"\" className=\"switch-off-text\">Dark</label>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\nexport default Header;","import React from 'react';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\n\r\nclass Column extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            id: this.props.col_id,\r\n            taskText: \"\"\r\n        }\r\n    }\r\n\r\n    onClickAddTask() {\r\n        if (this.state.taskText === \"\") return;\r\n        this.props.addTask(this.state.id, this.state.taskText);\r\n\r\n        // Update the column that has added its new task\r\n        this.setState({\r\n            taskText: \"\"\r\n        })\r\n    }\r\n\r\n    onChangeTaskInput(e) {\r\n        console.log(e.target.value);\r\n        this.setState({\r\n            taskText: e.target.value\r\n        })\r\n    }\r\n\r\n    onClickDeleteTask(task_id) {\r\n        this.props.deleteTask(this.state.id, task_id);\r\n    }\r\n\r\n    onClickCompleteTask(task_id) {\r\n        this.props.addCompletedTimeToTask(this.state.id, task_id);\r\n    }\r\n\r\n    onClickMoveTaskToNextCol(taskObj) {\r\n        this.props.moveTaskToNextCol(this.state.id, taskObj);\r\n    }\r\n\r\n    onClickMoveTaskToPrevCol(taskObj) {\r\n        this.props.moveTaskToPrevCol(this.state.id, taskObj);\r\n    }\r\n\r\n    render() {\r\n        var tasks;\r\n        if (this.props.tasks) {\r\n             tasks = this.props.tasks.map(task => {\r\n                return (\r\n                    <div key={task.id}>\r\n                    <li>\r\n                        <TextareaAutosize  draggable=\"true\" spellCheck=\"false\" className=\"txtarea_task\" defaultValue={task.text}/>\r\n                        <div>         \r\n                            {(!this.props.isFirstCol) ?\r\n                                <button className=\"btn-prevArrow\" onClick={() => this.onClickMoveTaskToPrevCol(task)}>\r\n                                    <span className=\"material-icons\"></span>\r\n                                </button>\r\n                                : null             \r\n                            }\r\n                            <button className=\"btn-completeTask\" onClick={() => this.onClickCompleteTask(task.id)}><span className=\"material-icons\">&#xe5ca;</span></button>\r\n                            <button id={\"btn-deleteTask\"+task.id} className=\"btn-deleteTask\" onClick={() => this.onClickDeleteTask(task.id)}><span className=\"material-icons\">&#xe872;</span></button>\r\n                            {(!this.props.isLastCol) ?\r\n                                <button className=\"btn-nextArrow\" onClick={() => this.onClickMoveTaskToNextCol(task)}>\r\n                                    <span className=\"material-icons\"></span>\r\n                                </button>\r\n                                : null\r\n                            }\r\n                            {(task.completed_time) ?\r\n                                <p className=\"p-completedTime\">{'Completed: ' + task.completed_time}</p>\r\n                                : null\r\n                            }\r\n                            \r\n                        </div>\r\n                    </li>\r\n                    </div>\r\n                )      \r\n            });\r\n        }\r\n\r\n        else {\r\n            tasks = null\r\n        }\r\n        \r\n        return (\r\n            <div className=\"column\">\r\n                \r\n                <input type=\"text\" className=\"txt-columnName\" placeholder=\"Enter Column Name\" />\r\n                <button className=\"btn-deleteColumn\" onClick={this.props.onClickDeleteCol}><span className=\"material-icons\">&#xe872;</span></button>\r\n                <TextareaAutosize rowsMin={1}\r\n                    spellCheck=\"false\"\r\n                    placeholder=\"Enter New Task\"\r\n                    className=\"txtarea-newTask\"\r\n                    value={this.state.taskText} \r\n                    onChange={this.onChangeTaskInput.bind(this)}\r\n                />\r\n                <button className=\"btn-addTask\" onClick={this.onClickAddTask.bind(this)}>Post Task</button>\r\n                <ul>\r\n                    {tasks}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Column;","import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport Column from './components/Column';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      isDarkMode: false,\r\n    }\r\n  }\r\n\r\n  changeTheme() {\r\n    this.setState({\r\n      isDarkMode: this.state.isDarkMode ? false : true\r\n    })\r\n    \r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n  window.onbeforeunload = function(e) {\r\n\r\n    var dialogText = 'Dialog text here';\r\n    e.returnValue = dialogText;\r\n    return dialogText;\r\n  }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={this.state.isDarkMode? \"app-darkMode\" : \"app\"} >\r\n        <Board changeTheme={() => this.changeTheme()}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Board extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    \r\n    this.state = {\r\n      columnListArr: [],\r\n      isDarkMode: false,\r\n    }\r\n  }\r\n\r\n  onClickAddCol() {\r\n    var currentList = this.state.columnListArr;\r\n    var newCol;\r\n    \r\n    if (currentList.length === 0) {\r\n      newCol = {id: 0, tasks: []}\r\n    }\r\n    else {\r\n      newCol = {id: currentList[currentList.length-1].id + 1, tasks: []}\r\n    }\r\n    \r\n    this.setState({\r\n      columnListArr: [...this.state.columnListArr, newCol]\r\n    })\r\n  }\r\n\r\n  onClickDeleteCol(selectedCol_id) {\r\n    // remove column with matching column ID  \r\n    this.setState({\r\n      columnListArr: this.state.columnListArr.filter((col) => {\r\n        return col.id !== selectedCol_id;\r\n      })\r\n    })\r\n  }\r\n\r\n  addTask = (col_id, text, completed_time) => {\r\n    var currentCol = this.getColumnById(col_id);\r\n\r\n    if (currentCol['tasks'].length === 0) {\r\n      if (completed_time !== null) {\r\n        currentCol['tasks'] = [{id: 0, text: text, completed_time: completed_time}];\r\n      }\r\n      else {\r\n        currentCol['tasks'] = [{id: 0, text: text, completed_time: \"\"}];\r\n      }\r\n    }\r\n    \r\n    else {\r\n      if (completed_time) {\r\n        currentCol['tasks'].push({id: this.createNewId(currentCol['tasks']), text: text, completed_time: completed_time});\r\n      }\r\n      else {\r\n        currentCol['tasks'].push({id: this.createNewId(currentCol['tasks']), text: text});\r\n      }\r\n      \r\n    }\r\n\r\n    // replace the array that has been changed\r\n    this.setState({\r\n      columnListArr: this.state.columnListArr.map(col => {\r\n        if (col.id === currentCol.id) {\r\n          return currentCol;\r\n        }\r\n        else {return col};\r\n      })\r\n    })\r\n\r\n  }\r\n\r\n  addCompletedTimeToTask = (col_id, task_id) => {\r\n    var col = this.getColumnById(col_id);\r\n    var currentTime = new Date();\r\n\r\n    var taskObj = col['tasks'].find((task) => {\r\n      return task.id === task_id;\r\n    });\r\n\r\n    // create 'completed_time' key then store current time\r\n    taskObj['completed_time'] = currentTime.toLocaleString();\r\n\r\n    var taskChangedCol = col.tasks.map(task => {\r\n      if (task.id === task_id) { return taskObj}\r\n      else { return task };\r\n    })\r\n\r\n    // replace the array that has been changed\r\n    this.setState({\r\n      columnListArr: this.state.columnListArr.map(col => {\r\n        if (col.id === taskChangedCol.id) {\r\n          return taskChangedCol;\r\n        }\r\n        else return col;\r\n      })\r\n    })\r\n\r\n  }\r\n\r\n  deleteTask = (col_id, task_id) => {\r\n    // find column by ID\r\n    var col_found = this.getColumnById(col_id);\r\n\r\n    // filter column's task array by removing matching task ID\r\n    var filteredCol = col_found['tasks'].filter((task) => {\r\n      return task.id !== task_id;\r\n    })\r\n\r\n    // replace column's tasks with filtered array of tasks\r\n    col_found['tasks'] = filteredCol;\r\n\r\n    // setState target column only\r\n    this.setState({\r\n      columnListArr: this.state.columnListArr.map((col) => {\r\n        if (col.id === col_id) { return col_found }\r\n        else { return col };\r\n      })\r\n    })\r\n  }\r\n\r\n  moveTaskToNextCol = (col_id, taskObj) => {\r\n    this.deleteTask(col_id, taskObj.id);\r\n\r\n    var currentColumnIndex = this.getColumnIndex_in_columnListArr(col_id);\r\n    var nextCol = this.state.columnListArr[++currentColumnIndex];\r\n\r\n    // if taskObj has completed_time key then trigger 'addTask' method with additional completed_time\r\n    if ('completed_time' in taskObj) {\r\n      this.addTask(nextCol.id, taskObj.text, taskObj.completed_time)\r\n    }\r\n    else {\r\n      this.addTask(nextCol.id, taskObj.text)\r\n    }\r\n    \r\n  }\r\n\r\n  moveTaskToPrevCol = (col_id, taskObj) => {\r\n    this.deleteTask(col_id, taskObj.id);\r\n\r\n    var currentColumnIndex = this.getColumnIndex_in_columnListArr(col_id);\r\n    var prevCol = this.state.columnListArr[--currentColumnIndex];\r\n\r\n    // if taskObj has completed_time key then trigger 'addTask' method with additional completed_time\r\n    if ('completed_time' in taskObj) {\r\n      this.addTask(prevCol.id, taskObj.text, taskObj.completed_time)\r\n    }\r\n    else {\r\n      this.addTask(prevCol.id, taskObj.text)\r\n    }\r\n  }\r\n\r\n  getColumnIndex_in_columnListArr(col_id) {\r\n    const columnIndex = this.state.columnListArr.findIndex(col => {\r\n      // return matching column so it returns the column's index\r\n      if (col.id === col_id) { return col; }\r\n      else { return null; }\r\n    });\r\n    return columnIndex;\r\n  } \r\n\r\n  createNewId(taskArr) {\r\n    // return ++lastElementId < does not work, so duplicate id value in a new variable then increment by 1\r\n    var lastElementId = taskArr[taskArr.length-1].id;\r\n    var newId = lastElementId;\r\n    return ++newId;\r\n  }\r\n\r\n  getColumnById(col_id) {\r\n    // find the column with matching ID\r\n    var col = this.state.columnListArr.find(col_in_columnListArr => col_in_columnListArr.id === col_id)\r\n    return col;\r\n  }\r\n\r\n  onClickDarkMode() {\r\n    this.props.changeTheme();\r\n  }\r\n\r\n  render() {\r\n    var columns;\r\n    var columnCount = -1;\r\n      columns = this.state.columnListArr.map((column) => {\r\n        columnCount++;\r\n        return (\r\n          <Column key={column.id} col_id={column.id} tasks={column.tasks}\r\n          onClickDeleteCol={() => this.onClickDeleteCol(column.id)}\r\n          addTask={this.addTask}\r\n          moveTaskToNextCol={this.moveTaskToNextCol}\r\n          moveTaskToPrevCol={this.moveTaskToPrevCol}\r\n          deleteTask={this.deleteTask}\r\n          addCompletedTimeToTask={this.addCompletedTimeToTask}\r\n          isFirstCol={(columnCount === 0) ? true : false}\r\n          isLastCol={(columnCount === this.state.columnListArr.length - 1) ? true : false}\r\n          />\r\n        )\r\n      });\r\n\r\n    const txtNoContent = (columns.length === 0) ?\r\n        <h1 className=\"heading-noContent\">Oops! No Board Columns<br/> Click the plus button above to create a column</h1>\r\n        : null\r\n\r\n    return (\r\n    <div>\r\n      <Header onClickAddCol={() => this.onClickAddCol()} onClickDarkMode={() => this.onClickDarkMode()}/>\r\n      {txtNoContent}\r\n      {columns} \r\n    </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}