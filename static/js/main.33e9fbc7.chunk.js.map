{"version":3,"sources":["components/Header.js","components/Column.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","type","spellCheck","placeholder","onClick","onClickAddCol","onClickDarkMode","htmlFor","Column","state","id","col_id","newTaskText","e","this","setState","target","value","task_id","editTaskText","addTask","addCompletedTimeToTask","deleteTask","taskObj","moveTaskToNextCol","moveTaskToPrevCol","tasks","map","task","key","TextareaAutosize","draggable","defaultValue","text","onChange","onChangeTaskText","bind","isFirstCol","onClickMoveTaskToPrevCol","onClickCompleteTask","onClickDeleteTask","isLastCol","onClickMoveTaskToNextCol","completed_time","onClickDeleteCol","rowsMin","onChangeNewTaskText","onClickAddTask","React","Component","Board","col","getColumnById","currentTime","Date","find","toLocaleString","taskChangedCol","columnListArr","currentCol","length","push","createNewTaskId","col_found","filteredCol","filter","editedTaskText","editedColumnListArr","forEach","currentColumnIndex","getColumnIndex_in_columnListArr","nextCol","prevCol","isDarkMode","taskArr","newId","col_in_columnListArr","findIndex","newCol","currentList","changeTheme","selectedCol_id","columns","columnCount","txtNoContent","column","App","window","onbeforeunload","returnValue","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.33e9fbc7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = (props) => {\r\n        return (\r\n            <div className=\"header\">\r\n                <input type=\"text\" spellCheck=\"false\" className={\"txt-title\"} placeholder=\"Enter Title\"/>\r\n                <div className=\"menu\">\r\n                    <span></span>\r\n                    <button className=\"btn-addColumn\" onClick={props.onClickAddCol}>+</button>\r\n                    <span className=\"switch-container\">\r\n                    <input type=\"checkbox\" className=\"chk-darkMode\" onClick={props.onClickDarkMode}/>\r\n                    <label htmlFor=\"\" className=\"switch-on-text\">Light</label>\r\n                    <label htmlFor=\"\" className=\"switch-off-text\">Dark</label>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\nexport default Header;","import React from 'react';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\n\r\nclass Column extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            id: this.props.col_id,\r\n            newTaskText: \"\"\r\n        }\r\n    }\r\n\r\n    onChangeNewTaskText(e) {\r\n        this.setState({\r\n            newTaskText: e.target.value\r\n        });\r\n    }\r\n\r\n    // 'this' parameter received as the last parameter, 'e' is 'this' parameter\r\n    onChangeTaskText(task_id, e) {\r\n        this.props.editTaskText(this.state.id, task_id, e.target.value);\r\n    }\r\n\r\n    onClickAddTask() {\r\n        if (this.state.newTaskText === \"\") return;\r\n        this.props.addTask(this.state.id, this.state.newTaskText);\r\n\r\n        // Update the column that has added a new task in it\r\n        this.setState({\r\n            newTaskText: \"\"\r\n        });\r\n    }\r\n\r\n    onClickCompleteTask(task_id) {\r\n        this.props.addCompletedTimeToTask(this.state.id, task_id);\r\n    }\r\n\r\n    onClickDeleteTask(task_id) {\r\n        this.props.deleteTask(this.state.id, task_id);\r\n    }\r\n\r\n    onClickMoveTaskToNextCol(taskObj) {\r\n        this.props.moveTaskToNextCol(this.state.id, taskObj);\r\n    }\r\n\r\n    onClickMoveTaskToPrevCol(taskObj) {\r\n        this.props.moveTaskToPrevCol(this.state.id, taskObj);\r\n    }\r\n\r\n\r\n    render() {\r\n        var tasks;\r\n        if (this.props.tasks) {\r\n             tasks = this.props.tasks.map(task => {\r\n                return (\r\n                    <div key={task.id}>\r\n                    <li>\r\n                        <TextareaAutosize draggable=\"true\" spellCheck=\"false\" className=\"txtarea-task\"\r\n                        defaultValue={task.text}\r\n                        onChange={this.onChangeTaskText.bind(this, task.id)}\r\n                        />\r\n                        <div>         \r\n                            {(!this.props.isFirstCol) ?\r\n                                <button className=\"btn-prevArrow\" onClick={() => this.onClickMoveTaskToPrevCol(task)}>\r\n                                    <span className=\"material-icons\"></span>\r\n                                </button>\r\n                                : null             \r\n                            }\r\n                            <button className=\"btn-completeTask\" onClick={() => this.onClickCompleteTask(task.id)}>\r\n                                <span className=\"material-icons\">&#xe5ca;</span>\r\n                            </button>\r\n                            <button id={\"btn-deleteTask\"+task.id} className=\"btn-deleteTask\" onClick={() => this.onClickDeleteTask(task.id)}>\r\n                                <span className=\"material-icons\">&#xe872;</span>\r\n                            </button>\r\n                            {(!this.props.isLastCol) ?\r\n                                <button className=\"btn-nextArrow\" onClick={() => this.onClickMoveTaskToNextCol(task)}>\r\n                                    <span className=\"material-icons\"></span>\r\n                                </button>\r\n                                : null\r\n                            }\r\n                            {(task.completed_time) ?\r\n                                <p className=\"p-completedTime\">{'Completed: ' + task.completed_time}</p>\r\n                                : null\r\n                            }\r\n                            \r\n                        </div>\r\n                    </li>\r\n                    </div>\r\n                )\r\n            });\r\n        }\r\n\r\n        else {\r\n            tasks = null\r\n        }\r\n        \r\n        return (\r\n            <div className=\"column\">         \r\n                <input type=\"text\" className=\"txt-columnName\" placeholder=\"Enter Column Name\" />\r\n                <button className=\"btn-deleteColumn\" onClick={this.props.onClickDeleteCol}>\r\n                    <span className=\"material-icons\">&#xe872;</span>\r\n                </button>\r\n                <TextareaAutosize rowsMin={1}\r\n                    spellCheck=\"false\"\r\n                    placeholder=\"Enter New Task\"\r\n                    className=\"txtarea-newTask\"\r\n                    value={this.state.newTaskText} \r\n                    onChange={this.onChangeNewTaskText.bind(this)}\r\n                />\r\n                <button className=\"btn-addTask\" onClick={this.onClickAddTask.bind(this)}>Post Task</button>\r\n                <ul>\r\n                    {tasks}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Column;","import React from 'react';\r\nimport Header from './Header';\r\nimport Column from './Column';\r\n\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n      super(props)\r\n      \r\n      this.state = {\r\n        columnListArr: [],\r\n        isDarkMode: false,\r\n      }\r\n    }\r\n\r\n    // use arrow function to access state and class methods\r\n    addCompletedTimeToTask = (col_id, task_id) => {\r\n        var col = this.getColumnById(col_id);\r\n        var currentTime = new Date();\r\n    \r\n        var taskObj = col['tasks'].find(task => task.id === task_id);\r\n    \r\n        // create 'completed_time' key then store current time\r\n        taskObj['completed_time'] = currentTime.toLocaleString();\r\n    \r\n        var taskChangedCol = col.tasks.map(task => {\r\n          if (task.id === task_id) { return taskObj}\r\n          else { return task };\r\n        });\r\n    \r\n        // replace the array that has been changed\r\n        this.setState({\r\n          columnListArr: this.state.columnListArr.map(col => {\r\n            if (col.id === taskChangedCol.id) {\r\n              return taskChangedCol;\r\n            }\r\n            else return col;\r\n          })\r\n        });\r\n    }\r\n\r\n    addTask = (col_id, text, completed_time) => {\r\n        var currentCol = this.getColumnById(col_id);\r\n    \r\n        if (currentCol['tasks'].length === 0) {\r\n            if (completed_time !== null) {\r\n            currentCol['tasks'] = [{id: 0, text: text, completed_time: completed_time}];\r\n            }\r\n            else {\r\n            currentCol['tasks'] = [{id: 0, text: text, completed_time: \"\"}];\r\n            }\r\n        }\r\n        \r\n        else {\r\n            if (completed_time) {\r\n            currentCol['tasks'].push({id: this.createNewTaskId(currentCol['tasks']), text: text, completed_time: completed_time});\r\n            }\r\n            else {\r\n            currentCol['tasks'].push({id: this.createNewTaskId(currentCol['tasks']), text: text});\r\n            }\r\n        }\r\n    \r\n        // replace the array that has been changed\r\n        this.setState({\r\n            columnListArr: this.state.columnListArr.map(col => {\r\n            if (col.id === currentCol.id) {\r\n                return currentCol;\r\n            }\r\n            else {return col};\r\n            })\r\n        });\r\n    }\r\n\r\n    createNewTaskId(taskArr) {\r\n        // return ++lastElementId < does not work, so duplicate id value in a new variable then increment by 1\r\n        var lastElementId = taskArr[taskArr.length-1].id;\r\n        var newId = lastElementId;\r\n        return ++newId;\r\n    }\r\n\r\n    deleteTask = (col_id, task_id) => {\r\n        // find column by ID\r\n        var col_found = this.getColumnById(col_id);\r\n    \r\n        // filter column's task array by removing matching task ID\r\n        var filteredCol = col_found['tasks'].filter(task => task.id !== task_id);\r\n    \r\n        // replace column's tasks with filtered array of tasks\r\n        col_found['tasks'] = filteredCol;\r\n    \r\n        // setState target column only\r\n        this.setState({\r\n          columnListArr: this.state.columnListArr.map((col) => {\r\n            if (col.id === col_id) { return col_found }\r\n            else { return col };\r\n          })\r\n        });\r\n    }\r\n\r\n    editTaskText = (col_id, task_id, editedTaskText) => {\r\n        var editedColumnListArr = this.state.columnListArr;\r\n\r\n        // find task by its parent(column) ID and then its ID, then change its text to new text.\r\n        editedColumnListArr.forEach(col => {\r\n            if (col.id === col_id) {\r\n                col.tasks.forEach(task => {\r\n                    if (task.id === task_id) { task.text = editedTaskText; }\r\n                })\r\n            }\r\n        });\r\n\r\n        this.setState({\r\n            columnListArr: editedColumnListArr\r\n        });\r\n    }\r\n\r\n    getColumnById(col_id) {\r\n        // find the column with matching ID\r\n        var col = this.state.columnListArr.find(col_in_columnListArr => col_in_columnListArr.id === col_id)\r\n        return col;\r\n    }\r\n\r\n    getColumnIndex_in_columnListArr(col_id) {\r\n      // find column with matching col_id in columnListArr then return its index\r\n      const columnIndex = this.state.columnListArr.findIndex(col => (col.id === col_id));\r\n      return columnIndex;\r\n    }\r\n  \r\n    moveTaskToNextCol = (col_id, taskObj) => {\r\n        this.deleteTask(col_id, taskObj.id);\r\n    \r\n        var currentColumnIndex = this.getColumnIndex_in_columnListArr(col_id);\r\n        var nextCol = this.state.columnListArr[++currentColumnIndex];\r\n    \r\n        // if taskObj has completed_time key then trigger 'addTask' method with additional completed_time\r\n        if ('completed_time' in taskObj) {\r\n          this.addTask(nextCol.id, taskObj.text, taskObj.completed_time);\r\n        }\r\n        else {\r\n          this.addTask(nextCol.id, taskObj.text);\r\n        }\r\n    }\r\n    \r\n    moveTaskToPrevCol = (col_id, taskObj) => {\r\n        this.deleteTask(col_id, taskObj.id);\r\n\r\n        var currentColumnIndex = this.getColumnIndex_in_columnListArr(col_id);\r\n        var prevCol = this.state.columnListArr[--currentColumnIndex];\r\n\r\n        // if taskObj has completed_time key then trigger 'addTask' method with additional completed_time\r\n        if ('completed_time' in taskObj) {\r\n            this.addTask(prevCol.id, taskObj.text, taskObj.completed_time);\r\n        }\r\n        else {\r\n            this.addTask(prevCol.id, taskObj.text);\r\n        }\r\n    }\r\n  \r\n    onClickAddCol() {\r\n      var currentList = this.state.columnListArr;\r\n      var newCol;\r\n      \r\n      if (currentList.length === 0) {\r\n        newCol = {id: 0, tasks: []}\r\n      }\r\n      else {\r\n        newCol = {id: currentList[currentList.length-1].id + 1, tasks: []}\r\n      }\r\n      \r\n      this.setState({\r\n        columnListArr: [...this.state.columnListArr, newCol]\r\n      });\r\n    }\r\n\r\n    onClickDarkMode() {\r\n        this.props.changeTheme();\r\n    }\r\n  \r\n    onClickDeleteCol(selectedCol_id) {\r\n      // remove column with matching column ID  \r\n      this.setState({\r\n        columnListArr: this.state.columnListArr.filter(col => col.id !== selectedCol_id)\r\n      });\r\n    }\r\n  \r\n    render() {\r\n      var columns;\r\n      var columnCount = -1;\r\n        columns = this.state.columnListArr.map((column) => {\r\n          columnCount++;\r\n          return (\r\n            <Column col_id={column.id} key={column.id} tasks={column.tasks}\r\n            addCompletedTimeToTask={this.addCompletedTimeToTask}\r\n            addTask={this.addTask}\r\n            deleteTask={this.deleteTask}\r\n            editTaskText={this.editTaskText}\r\n            isFirstCol={(columnCount === 0) ? true : false}\r\n            isLastCol={(columnCount === this.state.columnListArr.length - 1) ? true : false}\r\n            moveTaskToNextCol={this.moveTaskToNextCol}\r\n            moveTaskToPrevCol={this.moveTaskToPrevCol}\r\n            onClickDeleteCol={() => this.onClickDeleteCol(column.id)}\r\n            />\r\n          )\r\n        });\r\n  \r\n      const txtNoContent = (columns.length === 0) ?\r\n          <h1 className=\"heading-noContent\">Oops! No Board Columns<br/>Click the plus button above to create a column</h1>\r\n          : null\r\n  \r\n      return (\r\n      <div>\r\n        <Header onClickAddCol={() => this.onClickAddCol()} onClickDarkMode={() => this.onClickDarkMode()}/>\r\n        {txtNoContent}\r\n        {columns} \r\n      </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default Board;","import React from 'react';\r\nimport Board from './components/Board';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      isDarkMode: false,\r\n    }\r\n  }\r\n\r\n  changeTheme() {\r\n    this.setState({\r\n      isDarkMode: this.state.isDarkMode ? false : true\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Alert when closing or refreshing page\r\n    window.onbeforeunload = function(e) {\r\n      var dialogText = '';\r\n      e.returnValue = dialogText;\r\n      return dialogText;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={this.state.isDarkMode? \"app-darkMode\" : \"app\"} >\r\n        <Board changeTheme={() => this.changeTheme()}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}