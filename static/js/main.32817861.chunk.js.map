{"version":3,"sources":["components/Header.js","components/Column.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","type","spellCheck","placeholder","onClick","onClickAddCol","Column","state","id","col_id","taskText","this","addTask","setState","e","console","log","target","value","task_id","deleteTask","addCompletedTimeToTask","taskObj","moveTaskToNextCol","moveTaskToPrevCol","tasks","map","task","key","defaultValue","text","isFirstCol","onClickMoveTaskToPrevCol","onClickCompleteTask","onClickDeleteTask","isLastCol","onClickMoveTaskToNextCol","completed_time","onClickDeleteCol","onChange","onChangeTaskInput","bind","onClickAddTask","React","Component","Board","currentCol","getColumnById","length","push","createNewId","columnListArr","col","currentTime","Date","find","toLocaleString","taskChangedCol","col_found","filteredCol","filter","currentColumnIndex","getColumnIndex_in_columnListArr","nextCol","prevCol","newCol","currentList","selectedCol_id","findIndex","taskArr","newId","col_in_columnListArr","columns","columnCount","txtNoContent","column","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.32817861.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <div className=\"header\">\r\n            <input type=\"text\" spellCheck=\"false\" className=\"txt-title\" placeholder=\"Enter Title\"/>\r\n            <button className=\"btn-addColumn\" onClick={props.onClickAddCol}>+</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nclass Column extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            id: this.props.col_id,\r\n            taskText: \"\"\r\n        }\r\n    }\r\n\r\n    onClickAddTask() {\r\n        if (this.state.taskText === \"\") return;\r\n        this.props.addTask(this.state.id, this.state.taskText);\r\n\r\n        // Update the column that has added its new task\r\n        this.setState({\r\n            taskText: \"\"\r\n        })\r\n    }\r\n\r\n    onChangeTaskInput(e) {\r\n        console.log(e.target.value);\r\n        this.setState({\r\n            taskText: e.target.value\r\n        })\r\n    }\r\n\r\n    onClickDeleteTask(task_id) {\r\n        this.props.deleteTask(this.state.id, task_id);\r\n    }\r\n\r\n    onClickCompleteTask(task_id) {\r\n        this.props.addCompletedTimeToTask(this.state.id, task_id);\r\n    }\r\n\r\n    onClickMoveTaskToNextCol(taskObj) {\r\n        this.props.moveTaskToNextCol(this.state.id, taskObj);\r\n    }\r\n\r\n    onClickMoveTaskToPrevCol(taskObj) {\r\n        this.props.moveTaskToPrevCol(this.state.id, taskObj);\r\n    }\r\n\r\n    render() {\r\n        var tasks;\r\n        if (this.props.tasks) {\r\n             tasks = this.props.tasks.map(task => {\r\n                return (\r\n                    <div key={task.id}>\r\n                    <li>\r\n                        <textarea spellCheck=\"false\" className=\"txtarea_task\" defaultValue={task.text}></textarea>\r\n                        <div>         \r\n                            {(!this.props.isFirstCol) ?\r\n                                <button className=\"btn-prevArrow\" onClick={() => this.onClickMoveTaskToPrevCol(task)}>&#10094;</button>\r\n                                : null             \r\n                            }\r\n                            <button className=\"btn-completeTask\" onClick={() => this.onClickCompleteTask(task.id)}>&#10004;</button>\r\n                            <button id={\"btn-deleteTask\"+task.id} className=\"btn-deleteTask\" onClick={() => this.onClickDeleteTask(task.id)}>&#10006;</button>\r\n                            {(!this.props.isLastCol) ?\r\n                                <button className=\"btn-nextArrow\" onClick={() => this.onClickMoveTaskToNextCol(task)}>&#10095;</button>\r\n                                : null             \r\n                            }\r\n                            {(task.completed_time) ?\r\n                                <p className=\"p-completedTime\">{'Completed: ' + task.completed_time}</p>\r\n                                : null\r\n                            }\r\n                            \r\n                        </div>\r\n                    </li>\r\n                    </div>\r\n                )      \r\n            });\r\n        }\r\n\r\n        else {\r\n            tasks = null\r\n        }\r\n        \r\n        return (\r\n            <div className=\"column\">\r\n                <input type=\"text\" className=\"txt-columnName\" placeholder=\"Enter Column Name\" />\r\n                <button className=\"btn-deleteColumn\" onClick={this.props.onClickDeleteCol}>X</button>\r\n\r\n                <textarea placeholder=\"Enter New Task\"\r\n                    spellCheck=\"false\"\r\n                    className=\"txtarea-newTask\"\r\n                    value={this.state.taskText} \r\n                    onChange={this.onChangeTaskInput.bind(this)}></textarea>\r\n                <button className=\"btn-addTask\" onClick={this.onClickAddTask.bind(this)}>Post Task</button>\r\n                <ul>\r\n                    {tasks}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Column;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Column from './components/Column';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board/>\n    </div>\n  );\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props)\n    \n    this.state = {\n      columnListArr: [],\n    }\n  }\n\n  onClickAddCol() {\n    var currentList = this.state.columnListArr;\n    var newCol;\n    \n    if (currentList.length === 0) {\n      newCol = {id: 0, tasks: []}\n    }\n    else {\n      newCol = {id: currentList[currentList.length-1].id + 1, tasks: []}\n    }\n    \n    this.setState({\n      columnListArr: [...this.state.columnListArr, newCol]\n    })\n  }\n\n  onClickDeleteCol(selectedCol_id) {\n    // remove column with matching column ID  \n    this.setState({\n      columnListArr: this.state.columnListArr.filter((col) => {\n        return col.id !== selectedCol_id;\n      })\n    })\n  }\n\n  addTask = (col_id, text, completed_time) => {\n    var currentCol = this.getColumnById(col_id);\n\n    if (currentCol['tasks'].length === 0) {\n      if (completed_time !== null) {\n        currentCol['tasks'] = [{id: 0, text: text, completed_time: completed_time}];\n      }\n      else {\n        currentCol['tasks'] = [{id: 0, text: text, completed_time: \"\"}];\n      }\n    }\n    \n    else {\n      if (completed_time) {\n        currentCol['tasks'].push({id: this.createNewId(currentCol['tasks']), text: text, completed_time: completed_time});\n      }\n      else {\n        currentCol['tasks'].push({id: this.createNewId(currentCol['tasks']), text: text});\n      }\n      \n    }\n\n    // replace the array that has been changed\n    this.setState({\n      columnListArr: this.state.columnListArr.map(col => {\n        if (col.id === currentCol.id) {\n          return currentCol;\n        }\n        else {return col};\n      })\n    })\n\n  }\n\n  addCompletedTimeToTask = (col_id, task_id) => {\n    var col = this.getColumnById(col_id);\n    var currentTime = new Date();\n\n    var taskObj = col['tasks'].find((task) => {\n      return task.id === task_id;\n    });\n\n    // create 'completed_time' key then store current time\n    taskObj['completed_time'] = currentTime.toLocaleString();\n\n    var taskChangedCol = col.tasks.map(task => {\n      if (task.id === task_id) { return taskObj}\n      else { return task };\n    })\n\n    // replace the array that has been changed\n    this.setState({\n      columnListArr: this.state.columnListArr.map(col => {\n        if (col.id === taskChangedCol.id) {\n          return taskChangedCol;\n        }\n        else return col;\n      })\n    })\n\n  }\n\n  deleteTask = (col_id, task_id) => {\n    // find column by ID\n    var col_found = this.getColumnById(col_id);\n\n    // filter column's task array by removing matching task ID\n    var filteredCol = col_found['tasks'].filter((task) => {\n      return task.id !== task_id;\n    })\n\n    // replace column's tasks with filtered array of tasks\n    col_found['tasks'] = filteredCol;\n\n    // setState target column only\n    this.setState({\n      columnListArr: this.state.columnListArr.map((col) => {\n        if (col.id === col_id) { return col_found }\n        else { return col };\n      })\n    })\n  }\n\n  moveTaskToNextCol = (col_id, taskObj) => {\n    this.deleteTask(col_id, taskObj.id);\n\n    var currentColumnIndex = this.getColumnIndex_in_columnListArr(col_id);\n    var nextCol = this.state.columnListArr[++currentColumnIndex];\n\n    // if taskObj has completed_time key then trigger 'addTask' method with additional completed_time\n    if ('completed_time' in taskObj) {\n      this.addTask(nextCol.id, taskObj.text, taskObj.completed_time)\n    }\n    else {\n      this.addTask(nextCol.id, taskObj.text)\n    }\n    \n  }\n\n  moveTaskToPrevCol = (col_id, taskObj) => {\n    this.deleteTask(col_id, taskObj.id);\n\n    var currentColumnIndex = this.getColumnIndex_in_columnListArr(col_id);\n    var prevCol = this.state.columnListArr[--currentColumnIndex];\n\n    // if taskObj has completed_time key then trigger 'addTask' method with additional completed_time\n    if ('completed_time' in taskObj) {\n      this.addTask(prevCol.id, taskObj.text, taskObj.completed_time)\n    }\n    else {\n      this.addTask(prevCol.id, taskObj.text)\n    }\n  }\n\n  getColumnIndex_in_columnListArr(col_id) {\n    const columnIndex = this.state.columnListArr.findIndex(col => {\n      // return matching column so it returns the column's index\n      if (col.id === col_id) { return col; }\n      else { return null; }\n    });\n    return columnIndex;\n  } \n\n  createNewId(taskArr) {\n    // return ++lastElementId < does not work, so duplicate id value in a new variable then increment by 1\n    var lastElementId = taskArr[taskArr.length-1].id;\n    var newId = lastElementId;\n    return ++newId;\n  }\n\n  getColumnById(col_id) {\n    // find the column with matching ID\n    var col = this.state.columnListArr.find(col_in_columnListArr => col_in_columnListArr.id === col_id)\n    return col;\n  }\n\n  render() {\n    var columns;\n    var columnCount = -1;\n      columns = this.state.columnListArr.map((column) => {\n        columnCount++;\n        return (\n          <Column key={column.id} col_id={column.id} tasks={column.tasks}\n          onClickDeleteCol={() => this.onClickDeleteCol(column.id)}\n          addTask={this.addTask}\n          moveTaskToNextCol={this.moveTaskToNextCol}\n          moveTaskToPrevCol={this.moveTaskToPrevCol}\n          deleteTask={this.deleteTask}\n          addCompletedTimeToTask={this.addCompletedTimeToTask}\n          isFirstCol={(columnCount === 0) ? true : false}\n          isLastCol={(columnCount === this.state.columnListArr.length - 1) ? true : false}\n          />\n        )\n      });\n\n    const txtNoContent = (columns.length === 0) ?\n        <h1 className=\"heading-noContent\">Oops! No Board Columns<br/> Click the plus button above to create a column</h1>\n        : null\n\n    return (\n    <div>\n      <Header onClickAddCol={() => this.onClickAddCol()}/>\n      {txtNoContent}\n      {columns} \n    </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}