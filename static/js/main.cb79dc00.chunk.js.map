{"version":3,"sources":["components/Header.js","components/Task.js","components/Column.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","type","spellCheck","placeholder","onClick","onClickAddCol","onClickDarkMode","htmlFor","Task","task_id","task","id","TextareaAutosize","defaultValue","text","onChange","e","changedTaskText","target","value","isFirstCol","moveTaskToPrevCol","completeTask","deleteTask","isLastCol","moveTaskToNextCol","completed_time","Column","editedTaskText","editTaskText","state","addCompletedTimeToTask","taskObj","col_id","newTaskText","this","setState","addTask","tasks","map","key","onClickDeleteCol","rowsMin","onChangeNewTaskText","bind","onClickAddTask","React","Component","Board","col","getColumnById","currentTime","Date","find","toLocaleString","taskChangedCol","columnListArr","currentCol","length","push","createNewTaskId","col_found","filteredCol","filter","editedColumnListArr","forEach","currentColumnIndex","getColumnIndex_in_columnListArr","nextCol","prevCol","taskArr","newId","col_in_columnListArr","findIndex","newCol","currentList","changeTheme","selectedCol_id","columns","columnCount","txtNoContent","column","App","isDarkMode","window","onbeforeunload","returnValue","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cb79dc00.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = (props) => {\r\n        return (\r\n            <div className=\"header\">\r\n                <input type=\"text\" spellCheck=\"false\" className={\"txt-title\"} placeholder=\"Enter Title\"/>\r\n                <div className=\"menu\">\r\n                    <span></span>\r\n                    <button className=\"btn-addColumn\" onClick={props.onClickAddCol}>+</button>\r\n                    <span className=\"switch-container\">\r\n                    <input type=\"checkbox\" className=\"chk-darkMode\" onClick={props.onClickDarkMode}/>\r\n                    <label htmlFor=\"\" className=\"switch-on-text\">Light</label>\r\n                    <label htmlFor=\"\" className=\"switch-off-text\">Dark</label>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\nexport default Header;","import React from 'react';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\n\r\nconst Task = (props) => {\r\n    const task_id = props.task.id;\r\n\r\n    function onChangeTaskText(e){\r\n        props.changedTaskText(task_id, e.target.value);\r\n    }\r\n\r\n    function onClickCompleteTask() {\r\n        props.completeTask(task_id);\r\n    }\r\n\r\n    function onClickDeleteTask() {\r\n        props.deleteTask(task_id);\r\n    }\r\n\r\n    function onClickMoveTaskToNextCol() {\r\n        props.moveTaskToNextCol(props.task);\r\n    }\r\n\r\n    function onClickMoveTaskToPrevCol() {\r\n        props.moveTaskToPrevCol(props.task);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextareaAutosize spellCheck=\"false\" className=\"txtarea-task\"\r\n                    defaultValue={props.task.text}\r\n                    onChange={onChangeTaskText}>\r\n            </TextareaAutosize>\r\n            \r\n            <div>         \r\n                {(!props.isFirstCol) ?\r\n                    <button className=\"btn-prevArrow\" onClick={onClickMoveTaskToPrevCol}>\r\n                        <span className=\"material-icons\"></span>\r\n                    </button>\r\n                    : null             \r\n                }\r\n                <button className=\"btn-completeTask\" onClick={onClickCompleteTask}>\r\n                    <span className=\"material-icons\">&#xe5ca;</span>\r\n                </button>\r\n                <button id={\"btn-deleteTask\"+ props.task.id} className=\"btn-deleteTask\" onClick={onClickDeleteTask}>\r\n                    <span className=\"material-icons\">&#xe872;</span>\r\n                </button>\r\n                {(!props.isLastCol) ?\r\n                    <button className=\"btn-nextArrow\" onClick={onClickMoveTaskToNextCol}>\r\n                        <span className=\"material-icons\"></span>\r\n                    </button>\r\n                    : null\r\n                }\r\n                {(props.completed_time) ?\r\n                    <p className=\"p-completedTime\">{'Completed: ' + props.task.completed_time}</p>\r\n                    : null\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Task;","import React from 'react';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\nimport Task from './Task';\r\n\r\nclass Column extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            id: this.props.col_id,\r\n            newTaskText: \"\"\r\n        }\r\n    }\r\n\r\n    onChangeNewTaskText(e) {\r\n        this.setState({\r\n            newTaskText: e.target.value\r\n        });\r\n    }\r\n\r\n    onClickAddTask() {\r\n        if (this.state.newTaskText === \"\") return;\r\n        this.props.addTask(this.state.id, this.state.newTaskText);\r\n\r\n        // Update the column that has added a new task in it\r\n        this.setState({\r\n            newTaskText: \"\"\r\n        });\r\n    }\r\n\r\n    changedTaskText = (task_id, editedTaskText) => {\r\n        this.props.editTaskText(this.state.id, task_id, editedTaskText);\r\n    }\r\n\r\n    completeTask = (task_id) => {\r\n        this.props.addCompletedTimeToTask(this.state.id, task_id);\r\n    }\r\n\r\n    deleteTask = (task_id) => {\r\n        this.props.deleteTask(this.state.id, task_id);\r\n    }\r\n\r\n    moveTaskToNextCol = (taskObj) => {\r\n        this.props.moveTaskToNextCol(this.state.id, taskObj);\r\n    }\r\n\r\n    moveTaskToPrevCol = (taskObj) => {\r\n        this.props.moveTaskToPrevCol(this.state.id, taskObj);\r\n    }\r\n\r\n    render() {\r\n        var tasks;\r\n        if (this.props.tasks) {\r\n             tasks = this.props.tasks.map(task => {\r\n                return (\r\n                    <div key={task.id}>\r\n                    <li>\r\n                        <Task task={task}\r\n                        isFirstCol={this.props.isFirstCol}\r\n                        isLastCol={this.props.isLastCol}\r\n                        completed_time={task.completed_time}\r\n                        changedTaskText={this.changedTaskText}\r\n                        deleteTask={this.deleteTask}\r\n                        completeTask={this.completeTask}\r\n                        moveTaskToPrevCol={this.moveTaskToPrevCol}\r\n                        moveTaskToNextCol={this.moveTaskToNextCol}> \r\n                        </Task>\r\n                    </li>\r\n                    </div>\r\n                )\r\n            });\r\n        }\r\n\r\n        else {\r\n            tasks = null\r\n        }\r\n        \r\n        return (\r\n            <div className=\"column\">         \r\n                <input type=\"text\" className=\"txt-columnName\" placeholder=\"Enter Column Name\" />\r\n                <button className=\"btn-deleteColumn\" onClick={this.props.onClickDeleteCol}>\r\n                    <span className=\"material-icons\">&#xe872;</span>\r\n                </button>\r\n                <TextareaAutosize rowsMin={1}\r\n                    spellCheck=\"false\"\r\n                    placeholder=\"Enter New Task\"\r\n                    className=\"txtarea-newTask\"\r\n                    value={this.state.newTaskText} \r\n                    onChange={this.onChangeNewTaskText.bind(this)}>\r\n                </TextareaAutosize>\r\n                <button className=\"btn-addTask\" onClick={this.onClickAddTask.bind(this)}>Post Task</button>\r\n                <ul>\r\n                    {tasks}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Column;","import React from 'react';\r\nimport Header from './Header';\r\nimport Column from './Column';\r\n\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n      super(props)\r\n      \r\n      this.state = {\r\n        columnListArr: []\r\n      }\r\n    }\r\n\r\n    // use arrow function to access state and class methods\r\n    addCompletedTimeToTask = (col_id, task_id) => {\r\n        var col = this.getColumnById(col_id);\r\n        var currentTime = new Date();\r\n    \r\n        var taskObj = col['tasks'].find(task => task.id === task_id);\r\n    \r\n        // create 'completed_time' key then store current time\r\n        taskObj['completed_time'] = currentTime.toLocaleString();\r\n    \r\n        var taskChangedCol = col.tasks.map(task => {\r\n          if (task.id === task_id) { return taskObj}\r\n          else { return task };\r\n        });\r\n    \r\n        // replace the array that has been changed\r\n        this.setState({\r\n          columnListArr: this.state.columnListArr.map(col => {\r\n            if (col.id === taskChangedCol.id) {\r\n              return taskChangedCol;\r\n            }\r\n            else return col;\r\n          })\r\n        });\r\n    }\r\n\r\n    addTask = (col_id, text, completed_time) => {\r\n        var currentCol = this.getColumnById(col_id);\r\n    \r\n        if (currentCol['tasks'].length === 0) {\r\n            if (completed_time !== null) {\r\n            currentCol['tasks'] = [{id: 0, text: text, completed_time: completed_time}];\r\n            }\r\n            else {\r\n            currentCol['tasks'] = [{id: 0, text: text, completed_time: \"\"}];\r\n            }\r\n        }\r\n        \r\n        else {\r\n            if (completed_time) {\r\n            currentCol['tasks'].push({id: this.createNewTaskId(currentCol['tasks']), text: text, completed_time: completed_time});\r\n            }\r\n            else {\r\n            currentCol['tasks'].push({id: this.createNewTaskId(currentCol['tasks']), text: text});\r\n            }\r\n        }\r\n    \r\n        // replace the array that has been changed\r\n        this.setState({\r\n            columnListArr: this.state.columnListArr.map(col => {\r\n            if (col.id === currentCol.id) {\r\n                return currentCol;\r\n            }\r\n            else {return col};\r\n            })\r\n        });\r\n    }\r\n\r\n    createNewTaskId(taskArr) {\r\n        // return ++lastElementId < does not work, so duplicate id value in a new variable then increment by 1\r\n        var lastElementId = taskArr[taskArr.length-1].id;\r\n        var newId = lastElementId;\r\n        return ++newId;\r\n    }\r\n\r\n    deleteTask = (col_id, task_id) => {\r\n        // find column by ID\r\n        var col_found = this.getColumnById(col_id);\r\n    \r\n        // filter column's task array by removing matching task ID\r\n        var filteredCol = col_found['tasks'].filter(task => task.id !== task_id);\r\n    \r\n        // replace column's tasks with filtered array of tasks\r\n        col_found['tasks'] = filteredCol;\r\n    \r\n        // setState target column only\r\n        this.setState({\r\n          columnListArr: this.state.columnListArr.map((col) => {\r\n            if (col.id === col_id) { return col_found }\r\n            else { return col };\r\n          })\r\n        });\r\n    }\r\n\r\n    editTaskText = (col_id, task_id, editedTaskText) => {\r\n        var editedColumnListArr = this.state.columnListArr;\r\n\r\n        // find task by its parent(column) ID and then its ID, then change its text to new text.\r\n        editedColumnListArr.forEach(col => {\r\n            if (col.id === col_id) {\r\n                col.tasks.forEach(task => {\r\n                    if (task.id === task_id) { task.text = editedTaskText; }\r\n                })\r\n            }\r\n        });\r\n\r\n        this.setState({\r\n            columnListArr: editedColumnListArr\r\n        });\r\n    }\r\n\r\n    getColumnById(col_id) {\r\n        // find the column with matching ID\r\n        var col = this.state.columnListArr.find(col_in_columnListArr => col_in_columnListArr.id === col_id)\r\n        return col;\r\n    }\r\n\r\n    getColumnIndex_in_columnListArr(col_id) {\r\n      // find column with matching col_id in columnListArr then return its index\r\n      const columnIndex = this.state.columnListArr.findIndex(col => (col.id === col_id));\r\n      return columnIndex;\r\n    }\r\n  \r\n    moveTaskToNextCol = (col_id, taskObj) => {\r\n        this.deleteTask(col_id, taskObj.id);\r\n    \r\n        var currentColumnIndex = this.getColumnIndex_in_columnListArr(col_id);\r\n        var nextCol = this.state.columnListArr[++currentColumnIndex];\r\n    \r\n        // if taskObj has completed_time key then trigger 'addTask' method with additional completed_time\r\n        if ('completed_time' in taskObj) {\r\n          this.addTask(nextCol.id, taskObj.text, taskObj.completed_time);\r\n        }\r\n        else {\r\n          this.addTask(nextCol.id, taskObj.text);\r\n        }\r\n    }\r\n    \r\n    moveTaskToPrevCol = (col_id, taskObj) => {\r\n        this.deleteTask(col_id, taskObj.id);\r\n\r\n        var currentColumnIndex = this.getColumnIndex_in_columnListArr(col_id);\r\n        var prevCol = this.state.columnListArr[--currentColumnIndex];\r\n\r\n        // if taskObj has completed_time key then trigger 'addTask' method with additional completed_time\r\n        if ('completed_time' in taskObj) {\r\n            this.addTask(prevCol.id, taskObj.text, taskObj.completed_time);\r\n        }\r\n        else {\r\n            this.addTask(prevCol.id, taskObj.text);\r\n        }\r\n    }\r\n  \r\n    onClickAddCol() {\r\n      var currentList = this.state.columnListArr;\r\n      var newCol;\r\n      \r\n      if (currentList.length === 0) {\r\n        newCol = {id: 0, tasks: []}\r\n      }\r\n      else {\r\n        newCol = {id: currentList[currentList.length-1].id + 1, tasks: []}\r\n      }\r\n      \r\n      this.setState({\r\n        columnListArr: [...this.state.columnListArr, newCol]\r\n      });\r\n    }\r\n\r\n    onClickDarkMode() {\r\n        this.props.changeTheme();\r\n    }\r\n  \r\n    onClickDeleteCol(selectedCol_id) {\r\n      // remove column with matching column ID  \r\n      this.setState({\r\n        columnListArr: this.state.columnListArr.filter(col => col.id !== selectedCol_id)\r\n      });\r\n    }\r\n  \r\n    render() {\r\n      var columns;\r\n      // count column to determine first and last columns and\r\n      // show move-task-nextCol or move-task=prevCol or both buttons to tasks which \r\n      // are in columns that have adjacent columns\r\n      var columnCount = -1;\r\n        columns = this.state.columnListArr.map((column) => {\r\n          columnCount++;\r\n          return (\r\n            <Column col_id={column.id} key={column.id} tasks={column.tasks}\r\n            addCompletedTimeToTask={this.addCompletedTimeToTask}\r\n            addTask={this.addTask}\r\n            deleteTask={this.deleteTask}\r\n            editTaskText={this.editTaskText}\r\n            isFirstCol={(columnCount === 0) ? true : false}\r\n            isLastCol={(columnCount === this.state.columnListArr.length - 1) ? true : false}\r\n            moveTaskToNextCol={this.moveTaskToNextCol}\r\n            moveTaskToPrevCol={this.moveTaskToPrevCol}\r\n            onClickDeleteCol={() => this.onClickDeleteCol(column.id)}>\r\n            </Column>\r\n          )\r\n        });\r\n  \r\n      const txtNoContent = (columns.length === 0) ?\r\n          <h1 className=\"heading-noContent\">Oops! No Board Columns<br/>Click the plus button above to create a column</h1>\r\n          : null\r\n  \r\n      return (\r\n      <div>\r\n        <Header onClickAddCol={() => this.onClickAddCol()} onClickDarkMode={() => this.onClickDarkMode()}/>\r\n        {txtNoContent}\r\n        {columns} \r\n      </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default Board;","import React from 'react';\r\nimport Board from './components/Board';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      isDarkMode: false,\r\n    }\r\n  }\r\n\r\n  changeTheme() {\r\n    this.setState({\r\n      isDarkMode: this.state.isDarkMode ? false : true\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Alert when closing or refreshing page\r\n    window.onbeforeunload = function(e) {\r\n      var dialogText = '';\r\n      e.returnValue = dialogText;\r\n      return dialogText;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={this.state.isDarkMode? \"app-darkMode\" : \"app\"} >\r\n        <Board changeTheme={() => this.changeTheme()}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}